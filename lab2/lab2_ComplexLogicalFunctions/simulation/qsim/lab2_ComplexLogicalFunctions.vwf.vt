// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/26/2024 18:13:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab2_ComplexLogicalFunctions
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab2_ComplexLogicalFunctions_vlg_vec_tst();
// constants                                           
// general purpose registers
reg pin_name1;
reg pin_name2;
reg pin_name3;
reg pin_name4;
reg pin_name5;
reg pin_name6;
reg pin_name7;
reg pin_name8;
// wires                                               
wire pin_name9;
wire pin_name10;

// assign statements (if any)                          
lab2_ComplexLogicalFunctions i1 (
// port map - connection between master ports and signals/registers   
	.pin_name1(pin_name1),
	.pin_name2(pin_name2),
	.pin_name3(pin_name3),
	.pin_name4(pin_name4),
	.pin_name5(pin_name5),
	.pin_name6(pin_name6),
	.pin_name7(pin_name7),
	.pin_name8(pin_name8),
	.pin_name9(pin_name9),
	.pin_name10(pin_name10)
);
initial 
begin 
#1000000 $finish;
end 

// pin_name1
always
begin
	pin_name1 = 1'b0;
	pin_name1 = #500000 1'b1;
	#500000;
end 

// pin_name2
always
begin
	pin_name2 = 1'b0;
	pin_name2 = #250000 1'b1;
	#250000;
end 

// pin_name3
initial
begin
	repeat(3)
	begin
		pin_name3 = 1'b0;
		pin_name3 = #166667 1'b1;
		# 166666;
	end
	pin_name3 = 1'b0;
end 

// pin_name4
always
begin
	pin_name4 = 1'b0;
	pin_name4 = #125000 1'b1;
	#125000;
end 

// pin_name5
always
begin
	pin_name5 = 1'b0;
	pin_name5 = #100000 1'b1;
	#100000;
end 

// pin_name6
initial
begin
	repeat(6)
	begin
		pin_name6 = 1'b0;
		pin_name6 = #83333 1'b1;
		# 83333;
	end
	pin_name6 = 1'b0;
end 

// pin_name7
initial
begin
	repeat(7)
	begin
		pin_name7 = 1'b0;
		pin_name7 = #71429 1'b1;
		# 71428;
	end
	pin_name7 = 1'b0;
end 

// pin_name8
always
begin
	pin_name8 = 1'b0;
	pin_name8 = #62500 1'b1;
	#62500;
end 
endmodule

