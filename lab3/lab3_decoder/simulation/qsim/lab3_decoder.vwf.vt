// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/31/2024 07:58:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Schem1_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Schem1_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg check1;
reg check2;
reg check3;
reg input1;
reg input2;
reg input4;
// wires                                               
wire out0;
wire out0_2;
wire out1;
wire out1_2;
wire out2;
wire out2_2;
wire out3;
wire out3_2;
wire out4;
wire out4_2;
wire out5;
wire out5_2;
wire out6;
wire out6_2;
wire out7;
wire out7_2;

// assign statements (if any)                          
Schem1_1 i1 (
// port map - connection between master ports and signals/registers   
	.check1(check1),
	.check2(check2),
	.check3(check3),
	.input1(input1),
	.input2(input2),
	.input4(input4),
	.out0(out0),
	.out0_2(out0_2),
	.out1(out1),
	.out1_2(out1_2),
	.out2(out2),
	.out2_2(out2_2),
	.out3(out3),
	.out3_2(out3_2),
	.out4(out4),
	.out4_2(out4_2),
	.out5(out5),
	.out5_2(out5_2),
	.out6(out6),
	.out6_2(out6_2),
	.out7(out7),
	.out7_2(out7_2)
);
initial 
begin 
#1000000 $finish;
end 

// check1
initial
begin
	repeat(15)
	begin
		check1 = 1'b0;
		check1 = #33333 1'b1;
		# 33333;
	end
	check1 = 1'b0;
end 

// check2
initial
begin
	repeat(13)
	begin
		check2 = 1'b0;
		check2 = #38462 1'b1;
		# 38461;
	end
	check2 = 1'b0;
end 

// check3
initial
begin
	repeat(11)
	begin
		check3 = 1'b0;
		check3 = #45455 1'b1;
		# 45454;
	end
	check3 = 1'b0;
end 

// input1
initial
begin
	repeat(9)
	begin
		input1 = 1'b0;
		input1 = #55556 1'b1;
		# 55555;
	end
	input1 = 1'b0;
end 

// input2
initial
begin
	repeat(7)
	begin
		input2 = 1'b0;
		input2 = #71429 1'b1;
		# 71428;
	end
	input2 = 1'b0;
end 

// input4
always
begin
	input4 = 1'b0;
	input4 = #100000 1'b1;
	#100000;
end 
endmodule

