// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/06/2024 22:39:44"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab4_encoder_block
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab4_encoder_block_vlg_vec_tst();
// constants                                           
// general purpose registers
reg input1;
reg input2;
reg input3;
reg input4;
reg input5;
reg input6;
reg input7;
reg input8;
reg input9;
// wires                                               
wire output1_1;
wire output1_2;
wire output1_3;
wire output1_4;
wire output1_5;
wire output2_1;
wire output2_2;
wire output2_3;
wire output2_4;
wire output2_5;

// assign statements (if any)                          
lab4_encoder_block i1 (
// port map - connection between master ports and signals/registers   
	.input1(input1),
	.input2(input2),
	.input3(input3),
	.input4(input4),
	.input5(input5),
	.input6(input6),
	.input7(input7),
	.input8(input8),
	.input9(input9),
	.output1_1(output1_1),
	.output1_2(output1_2),
	.output1_3(output1_3),
	.output1_4(output1_4),
	.output1_5(output1_5),
	.output2_1(output2_1),
	.output2_2(output2_2),
	.output2_3(output2_3),
	.output2_4(output2_4),
	.output2_5(output2_5)
);
initial 
begin 
#1000000 $finish;
end 

// input1
always
begin
	input1 = 1'b0;
	input1 = #100000 1'b1;
	#100000;
end 

// input2
initial
begin
	repeat(7)
	begin
		input2 = 1'b0;
		input2 = #71429 1'b1;
		# 71428;
	end
	input2 = 1'b0;
end 

// input3
initial
begin
	repeat(9)
	begin
		input3 = 1'b0;
		input3 = #55556 1'b1;
		# 55555;
	end
	input3 = 1'b0;
end 

// input4
initial
begin
	repeat(11)
	begin
		input4 = 1'b0;
		input4 = #45455 1'b1;
		# 45454;
	end
	input4 = 1'b0;
end 

// input5
initial
begin
	repeat(13)
	begin
		input5 = 1'b0;
		input5 = #38462 1'b1;
		# 38461;
	end
	input5 = 1'b0;
end 

// input6
initial
begin
	repeat(15)
	begin
		input6 = 1'b0;
		input6 = #33333 1'b1;
		# 33333;
	end
	input6 = 1'b0;
end 

// input7
initial
begin
	repeat(17)
	begin
		input7 = 1'b0;
		input7 = #29412 1'b1;
		# 29411;
	end
	input7 = 1'b0;
end 

// input8
initial
begin
	repeat(17)
	begin
		input8 = 1'b0;
		input8 = #29412 1'b1;
		# 29411;
	end
	input8 = 1'b0;
end 

// input9
initial
begin
	repeat(19)
	begin
		input9 = 1'b0;
		input9 = #26316 1'b1;
		# 26315;
	end
	input9 = 1'b0;
end 
endmodule

