// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2024 10:24:01"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab7_adder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab7_adder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg inA0;
reg inA1;
reg inB0;
reg inB1;
reg inC;
// wires                                               
wire outP_1;
wire outP_2;
wire outS0_2;
wire outS1_1;
wire outS1_2;
wire outS2_1;

// assign statements (if any)                          
lab7_adder i1 (
// port map - connection between master ports and signals/registers   
	.inA0(inA0),
	.inA1(inA1),
	.inB0(inB0),
	.inB1(inB1),
	.inC(inC),
	.outP_1(outP_1),
	.outP_2(outP_2),
	.outS0_2(outS0_2),
	.outS1_1(outS1_1),
	.outS1_2(outS1_2),
	.outS2_1(outS2_1)
);
initial 
begin 
#1000000 $finish;
end 

// inA0
initial
begin
	repeat(3)
	begin
		inA0 = 1'b0;
		inA0 = #166667 1'b1;
		# 166666;
	end
	inA0 = 1'b0;
end 

// inA1
always
begin
	inA1 = 1'b0;
	inA1 = #100000 1'b1;
	#100000;
end 

// inB0
initial
begin
	repeat(7)
	begin
		inB0 = 1'b0;
		inB0 = #71429 1'b1;
		# 71428;
	end
	inB0 = 1'b0;
end 

// inB1
initial
begin
	repeat(9)
	begin
		inB1 = 1'b0;
		inB1 = #55556 1'b1;
		# 55555;
	end
	inB1 = 1'b0;
end 

// inC
initial
begin
	repeat(11)
	begin
		inC = 1'b0;
		inC = #45455 1'b1;
		# 45454;
	end
	inC = 1'b0;
end 
endmodule

