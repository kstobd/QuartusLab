// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/12/2024 20:32:45"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab8_code_converter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab8_code_converter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in2;
reg in4;
reg in8;
reg in16;
reg in32;
reg inEO;
// wires                                               
wire out2_1;
wire out2_2;
wire out4_1;
wire out4_2;
wire out8_1;
wire out8_2;
wire out10_1;
wire out10_2;
wire out20_1;
wire out20_2;
wire out40_1;
wire out40_2;

// assign statements (if any)                          
lab8_code_converter i1 (
// port map - connection between master ports and signals/registers   
	.in2(in2),
	.in4(in4),
	.in8(in8),
	.in16(in16),
	.in32(in32),
	.inEO(inEO),
	.out2_1(out2_1),
	.out2_2(out2_2),
	.out4_1(out4_1),
	.out4_2(out4_2),
	.out8_1(out8_1),
	.out8_2(out8_2),
	.out10_1(out10_1),
	.out10_2(out10_2),
	.out20_1(out20_1),
	.out20_2(out20_2),
	.out40_1(out40_1),
	.out40_2(out40_2)
);
initial 
begin 
#1000000 $finish;
end 

// in2
initial
begin
	repeat(3)
	begin
		in2 = 1'b0;
		in2 = #166667 1'b1;
		# 166666;
	end
	in2 = 1'b0;
end 

// in4
always
begin
	in4 = 1'b0;
	in4 = #100000 1'b1;
	#100000;
end 

// in8
initial
begin
	repeat(7)
	begin
		in8 = 1'b0;
		in8 = #71429 1'b1;
		# 71428;
	end
	in8 = 1'b0;
end 

// in16
initial
begin
	repeat(7)
	begin
		in16 = 1'b0;
		in16 = #71429 1'b1;
		# 71428;
	end
	in16 = 1'b0;
end 

// in32
initial
begin
	repeat(11)
	begin
		in32 = 1'b0;
		in32 = #45455 1'b1;
		# 45454;
	end
	in32 = 1'b0;
end 

// inEO
initial
begin
	repeat(13)
	begin
		inEO = 1'b0;
		inEO = #38462 1'b1;
		# 38461;
	end
	inEO = 1'b0;
end 
endmodule

