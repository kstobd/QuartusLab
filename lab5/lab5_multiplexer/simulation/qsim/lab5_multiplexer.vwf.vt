// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2024 20:56:42"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab5_multiplexer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_multiplexer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg input0;
reg input1;
reg input2;
reg input3;
reg input4;
reg input5;
reg input6;
reg input7;
reg inputEZ;
reg select1;
reg select2;
reg select4;
// wires                                               
wire output1_1;
wire output1_2;
wire output2_1;
wire output2_2;

// assign statements (if any)                          
lab5_multiplexer i1 (
// port map - connection between master ports and signals/registers   
	.input0(input0),
	.input1(input1),
	.input2(input2),
	.input3(input3),
	.input4(input4),
	.input5(input5),
	.input6(input6),
	.input7(input7),
	.inputEZ(inputEZ),
	.output1_1(output1_1),
	.output1_2(output1_2),
	.output2_1(output2_1),
	.output2_2(output2_2),
	.select1(select1),
	.select2(select2),
	.select4(select4)
);
initial 
begin 
#1000000 $finish;
end 

// input0
always
begin
	input0 = 1'b0;
	input0 = #100000 1'b1;
	#100000;
end 

// input1
initial
begin
	repeat(7)
	begin
		input1 = 1'b0;
		input1 = #71429 1'b1;
		# 71428;
	end
	input1 = 1'b0;
end 

// input2
initial
begin
	repeat(9)
	begin
		input2 = 1'b0;
		input2 = #55556 1'b1;
		# 55555;
	end
	input2 = 1'b0;
end 

// input3
initial
begin
	repeat(11)
	begin
		input3 = 1'b0;
		input3 = #45455 1'b1;
		# 45454;
	end
	input3 = 1'b0;
end 

// input4
initial
begin
	repeat(13)
	begin
		input4 = 1'b0;
		input4 = #38462 1'b1;
		# 38461;
	end
	input4 = 1'b0;
end 

// input5
initial
begin
	repeat(15)
	begin
		input5 = 1'b0;
		input5 = #33333 1'b1;
		# 33333;
	end
	input5 = 1'b0;
end 

// input6
initial
begin
	repeat(17)
	begin
		input6 = 1'b0;
		input6 = #29412 1'b1;
		# 29411;
	end
	input6 = 1'b0;
end 

// input7
initial
begin
	repeat(19)
	begin
		input7 = 1'b0;
		input7 = #26316 1'b1;
		# 26315;
	end
	input7 = 1'b0;
end 

// select1
always
begin
	select1 = 1'b0;
	select1 = #100000 1'b1;
	#100000;
end 

// select2
always
begin
	select2 = 1'b0;
	select2 = #50000 1'b1;
	#50000;
end 

// select4
initial
begin
	repeat(15)
	begin
		select4 = 1'b0;
		select4 = #33333 1'b1;
		# 33333;
	end
	select4 = 1'b0;
end 

// inputEZ
initial
begin
	repeat(3)
	begin
		inputEZ = 1'b0;
		inputEZ = #166667 1'b1;
		# 166666;
	end
	inputEZ = 1'b0;
end 
endmodule

